<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>literalice</title>
    <link>https://literalice.com/</link>
    <description>Recent content on literalice</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 06 Oct 2018 22:22:23 +0900</lastBuildDate>
    
        <atom:link href="https://literalice.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OpenShiftのJenkinsを好きなプラグインをインストールした状態でプロビジョニングする</title>
      <link>https://literalice.com/post/jenkins-plugin-openshift/</link>
      <pubDate>Sat, 06 Oct 2018 22:22:23 +0900</pubDate>
      
      <guid>https://literalice.com/post/jenkins-plugin-openshift/</guid>
      
        <description>&lt;p&gt;OpenShiftに機能の一部として同梱されているJenkinsですが、デプロイ時に環境変数を指定することで好きなJenkinsプラグインを追加することができます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.openshift.com/container-platform/3.10/using_images/other_images/jenkins.html#jenkins-environment-variables&#34;&gt;https://docs.openshift.com/container-platform/3.10/using_images/other_images/jenkins.html#jenkins-environment-variables&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;指定するのは、以下の二つの環境変数です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OVERRIDE_PV_PLUGINS_WITH_IMAGE_PLUGINS&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Jenkinsプラグインが保存されているPVへ、Jenkinsのコンテナからプラグインを上書きコピーするかどうか。
&lt;code&gt;false&lt;/code&gt;(デフォルト)の場合、Jenkinsが初回に起動したときしかプラグインがコピーされない。&lt;/li&gt;
&lt;li&gt;例： &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INSTALL_PLUGINS&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OVERRIDE_PV_PLUGINS_WITH_IMAGE_PLUGINS&lt;/code&gt;が有効な場合に、追加でインストールするプラグインをカンマ区切りで指定する&lt;/li&gt;
&lt;li&gt;例： &lt;code&gt;ssh-agent:1.17,slack&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この環境変数を指定するには、JenkinsのDeployment Config設定で、&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;https://literalice.com/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://literalice.com/images/jenkins-deploymentconfig-edit.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://literalice.com/images/jenkins-deploymentconfig-edit.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;以下のように環境変数を追加します。&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://literalice.com/images/jenkins-deploymentconfig-edit-env.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://literalice.com/images/jenkins-deploymentconfig-edit-env.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;そうすると、起動したJenkinsで指定したプラグインが設定されているはずです。&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://literalice.com/images/jenkins-plugin-installed.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://literalice.com/images/jenkins-plugin-installed.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;Templateなどを用意してやれば、必要なプラグインがインストールされた状態でJenkinsを使ってもらうことができますね。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>minishift addonでIstioを簡単に試す</title>
      <link>https://literalice.com/post/istio-minishift-addon/</link>
      <pubDate>Fri, 05 Oct 2018 14:01:05 +0900</pubDate>
      
      <guid>https://literalice.com/post/istio-minishift-addon/</guid>
      
        <description>

&lt;h2 id=&#34;istio-operator&#34;&gt;Istio Operator&lt;/h2&gt;

&lt;p&gt;このOperator全盛時代、IstioもOperatorが開発されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Maistra/istio-operator&#34;&gt;https://github.com/Maistra/istio-operator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Istioは、十数個のPodとCRD、RBAC設定などからなる大規模なミドルウェアであり、インストールやアップデート、保守作業も面倒なので、Operatorに保守してもらえれば嬉しいですね。&lt;/p&gt;

&lt;p&gt;OpenShiftのIstioが先月9月にTech Previewとなりましたが、ここでもこのOperatorでインストールすることになっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.openshift.com/container-platform/3.10/servicemesh-install/servicemesh-install.html&#34;&gt;https://docs.openshift.com/container-platform/3.10/servicemesh-install/servicemesh-install.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;minishift-addon&#34;&gt;minishift addon&lt;/h2&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;https://literalice.com/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://literalice.com/images/minishift-logo.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://literalice.com/images/minishift-logo.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;&lt;code&gt;minishift&lt;/code&gt;は、OpenShift版の&lt;code&gt;minikube&lt;/code&gt;とも言うべきツールで、ローカルでOpenShiftを簡単に立ち上げることができます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/minishift/minishift&#34;&gt;https://github.com/minishift/minishift&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;minishift&lt;/code&gt;の特長の一つに、addonという仕組みでどんどん機能を追加していくことができる点が挙げられます。&lt;/p&gt;

&lt;p&gt;例えば、以下のようにaddonを適用することで、 Eclipse Cheをローカルで立ち上げたクラスタにインストールできます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;minishift addons apply che&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;さらに、このaddonは後から自分で追加することも可能です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;minishift addons install &amp;lt;addonのディレクトリ&amp;gt;/&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;上記のように、addonのあるディレクトリを指定して&lt;code&gt;addons install&lt;/code&gt;コマンドを実行するだけでaddonを追加できます。&lt;/p&gt;

&lt;p&gt;addonはコミュニティで開発、サポートされている&lt;a href=&#34;https://github.com/minishift/minishift-addons&#34;&gt;リポジトリ&lt;/a&gt;があるので、 &lt;code&gt;git clone&lt;/code&gt;して試してみてください。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/minishift/minishift-addons.git

&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; minishift-addons/
minishift addons install add-ons/fabric8&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;istioをminishiftでインストール&#34;&gt;istioをminishiftでインストール&lt;/h2&gt;

&lt;p&gt;Istioもaddonとしてこのコミュニティリポジトリにホストされています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/minishift/minishift-addons/tree/master/add-ons/istio&#34;&gt;https://github.com/minishift/minishift-addons/tree/master/add-ons/istio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このaddonは、minishiftに立ち上げたクラスタに&lt;a href=&#34;https://github.com/Maistra/istio-operator&#34;&gt;istio-operator&lt;/a&gt;を使ってistioをセットアップするものです。&lt;/p&gt;

&lt;p&gt;本記事では、このaddonでIstioを試してみる方法を紹介します。&lt;/p&gt;

&lt;p&gt;といっても、上記のようにaddonをapplyするだけです。
ただし、前述のようにistioはPodを多数起動する関係上、メモリを多く使うので、少しデフォルトより積んだ状態でクラスタを起動しておきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;minishift start --memory&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;6GB

&lt;span class=&#34;c1&#34;&gt;#..
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
Login to server ...
Creating initial project &lt;span class=&#34;s2&#34;&gt;&amp;#34;myproject&amp;#34;&lt;/span&gt; ...
Server Information ...
OpenShift server started.

The server is accessible via web console at:
    https://192.168.64.68:8443

You are logged in as:
    User:     developer
    Password: &amp;lt;any value&amp;gt;

To login as administrator:
    oc login -u system:admin&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;dynamic-admission-controllers-addonの適用&#34;&gt;dynamic-admission-controllers addonの適用&lt;/h3&gt;

&lt;p&gt;起動が終わったら、 istio addonを適用します。&lt;/p&gt;

&lt;p&gt;ただし、Podデプロイ時にistioのsidecarコンテナを自動で挿入するためには、Dynamic Admission Controllerを有効化する必要があります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.openshift.com/container-platform/3.10/servicemesh-install/servicemesh-install.html#updating-master-configuration&#34;&gt;https://docs.openshift.com/container-platform/3.10/servicemesh-install/servicemesh-install.html#updating-master-configuration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回はistioctlコマンドでsidecarを自分で挿入するのではなく、便利な自動挿入を使ってみたいのでこのDynamic Admission Controllerも有効化します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/minishift/minishift-addons.git

&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; minishift-addons/
minishift addons install add-ons/dynamic-admission-controllers/
&lt;span class=&#34;c1&#34;&gt;# Addon &amp;#39;dynamic-admission-controllers&amp;#39; installed
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
minishift addons apply dynamic-admission-controllers

&lt;span class=&#34;c1&#34;&gt;# -- Applying addon &amp;#39;dynamic-admission-controllers&amp;#39;:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Enable required admission configs...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Restart kube-api...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;# Dynamic admission controllers add-on successfully applied&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;これで、必要なDynamic Admission Controllerが有効化されました。&lt;/p&gt;

&lt;h3 id=&#34;istio-addonの適用&#34;&gt;istio addonの適用&lt;/h3&gt;

&lt;p&gt;次に、istio addonを適用します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;minishift addons install add-ons/istio/
&lt;span class=&#34;c1&#34;&gt;# Addon &amp;#39;istio&amp;#39; installed
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
minishift addons apply istio
# -- Applying addon &lt;span class=&#34;s1&#34;&gt;&amp;#39;istio&amp;#39;&lt;/span&gt;:&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;これで、クラスタ上にistio Operatorがインストールされ、そのOperatorによりistioのインストール、必要なCRD、権限の設定が行われ、istioが使用できるようになります。&lt;/p&gt;

&lt;p&gt;istioのpodがデプロイされているか確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;oc get pods -w -n istio-system --as system:admin

NAME                                          READY     STATUS              RESTARTS   AGE
openshift-ansible-istio-installer-job-rm6hn   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;/1       ContainerCreating   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          15s&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;istioをインストールするjobが実行され、以下のようにpodがデプロイされることが分かります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;NAME                                          READY     STATUS      RESTARTS   AGE
elasticsearch-0                               &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4h
grafana-65db6b47c9-bj2gc                      &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4h
istio-citadel-84fb7985bf-qsrvs                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4h
istio-egressgateway-86f49899c9-fscgb          &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4h
istio-galley-655c4f9ccd-n66rx                 &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4h
istio-ingressgateway-8695db5498-5x9gx         &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4h
istio-pilot-b969499c4-bvcbr                   &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;/2       Running     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4h
istio-policy-5455899b66-mzxsb                 &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;/2       Running     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4h
istio-sidecar-injector-8975849b4-ghsqz        &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4h
istio-statsd-prom-bridge-7f44bb5ddb-kbldf     &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4h
istio-telemetry-584c9ff7f5-7nksl              &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;/2       Running     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4h
jaeger-agent-5zjdv                            &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4h
jaeger-collector-7764fc77b6-p4pln             &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4h
jaeger-query-5c7fb9878d-z7nf2                 &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;          4h
kiali-5dd65695f7-f5hsd                        &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4h
openshift-ansible-istio-installer-job-rm6hn   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;/1       Completed   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4h
prometheus-84bd4b9796-njpzv                   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4h&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;istioの動作確認&#34;&gt;istioの動作確認&lt;/h3&gt;

&lt;p&gt;istioがインストールされ、sidecarコンテナがデプロイされることを確認します。&lt;/p&gt;

&lt;p&gt;istioのsidecarコンテナが適切にデプロイされるには、sidecarコンテナの動作に必要な権限が割り当てられている必要があります。&lt;/p&gt;

&lt;p&gt;そのために、以下設定を行ってください。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# sidecarコンテナの起動処理で必要な権限を追加
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;oc adm policy add-scc-to-user privileged -z default -n myproject&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;以下をデプロイして、sidecarコンテナが適切に追加されていることを確認してください。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# sample-istio.yml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;extensions/v1beta1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Deployment&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sleep&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;replicas&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;template&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;labels&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;app&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sleep&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;annotations&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;sidecar.istio.io/inject&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;containers&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;sleep&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tutum/curl&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;command&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/bin/sleep&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;infinity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;imagePullPolicy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;IfNotPresent&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;oc apply -f sample-istio.yml
oc get pods -w

NAME                     READY     STATUS        RESTARTS   AGE
sleep-f845bcb9d-z889d    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;/2       Init:0/1      &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          3h
sleep-f845bcb9d-z889d   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;/2       PodInitializing   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;         3h
sleep-f845bcb9d-z889d   &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;         3h&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;上記のように、2つのコンテナがデプロイされていれば適切にistioがインストールされています。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;この記事では、istioが簡単に試すことができる、minishiftのaddonを紹介しました。&lt;/p&gt;

&lt;p&gt;このほか、istioによるservice meshの管理画面であるkialiもインストールされるので、色々といじってみると楽しいと思います。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;minishift openshift service kiali
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;--------------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;----------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-------------------------------------------------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;--------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  NAMESPACE   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; NAME  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; NODEPORT &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;                    ROUTE-URL                    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; WEIGHT &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;--------------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;----------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-------------------------------------------------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;--------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; istio-system &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; kiali &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; https://kiali-istio-system.192.168.64.68.nip.io &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;--------------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;----------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-------------------------------------------------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;--------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;

open &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;minishift openshift service -u kiali&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; # username/pass : admin/admin&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://literalice.com/images/kiali-screenshot-20181005.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://literalice.com/images/kiali-screenshot-20181005.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

</description>
      
    </item>
    
    <item>
      <title>Kafka operator (strimzi)でKubernetes上にNoOpsなメッセージングシステムを実現する</title>
      <link>https://literalice.com/post/strimzi/</link>
      <pubDate>Thu, 04 Oct 2018 16:01:23 +0800</pubDate>
      
      <guid>https://literalice.com/post/strimzi/</guid>
      
        <description>


&lt;link rel=&#34;stylesheet&#34; href=&#34;https://literalice.com/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://literalice.com/images/strimzi_logo.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://literalice.com/images/strimzi_logo.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;kafkaとkubernetes&#34;&gt;KafkaとKubernetes&lt;/h2&gt;

&lt;p&gt;メッセージングシステムは昔からいろいろな用途で使われてきましたが、近年のモダンなサービス開発という流れでもその重要性は大きくなっています。&lt;br /&gt;
マイクロサービス間の非同期な連携とか、イベントソーシングなアプリのイベントストア、分散システムのログ集約などなど様々ですね。&lt;/p&gt;

&lt;p&gt;Kubernetes上でマイクロサービスを作成する場合も、kubernetesクラスタ上にKafkaをインストールしてサクッと使ってみたいものです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;

&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://cdn-images-1.medium.com/max/1600/1*s0jqmRff9avwTrfQPHfeeg.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://cdn-images-1.medium.com/max/1600/1*s0jqmRff9avwTrfQPHfeeg.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;a href=&#34;https://medium.com/@ulymarins/an-introduction-to-apache-kafka-and-microservices-communication-bf0a0966d63&#34;&gt;https://medium.com/@ulymarins/an-introduction-to-apache-kafka-and-microservices-communication-bf0a0966d63&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;しかしKafkaは、Kafkaのプロセスだけでなくzookeeperのクラスタも構築して保守してやる必要があったり、そもそもステートフルだったりで、kubernetes上でデプロイ、保守するのはとても敷居が高いものでした。&lt;/p&gt;

&lt;p&gt;そこを解決するのが&lt;a href=&#34;http://strimzi.io/&#34;&gt;strimzi&lt;/a&gt;というOSSです。&lt;/p&gt;

&lt;p&gt;strimziは、&lt;code&gt;operator&lt;/code&gt;という仕組みでkubernetes上のKafkaクラスタの管理を大幅に省力化します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;operator&lt;/code&gt;に関しては、 &lt;a href=&#34;https://pocketstudio.net/2016/11/10/introducing-operators-translate-jp/&#34;&gt;https://pocketstudio.net/2016/11/10/introducing-operators-translate-jp/&lt;/a&gt; あたりが参考になります。&lt;br /&gt;
その実体は、 &lt;strong&gt;Kubernetesにデプロイされたコンテナ&lt;/strong&gt; です。&lt;br /&gt;
KubernetesのAPIでイベントを監視して、コンテナをデプロイしたり設定したりバックアップしたりといった保守作業を行うコンテナのことを&lt;code&gt;operator&lt;/code&gt;と呼びます。&lt;/p&gt;

&lt;p&gt;strimziでは、以下3つの&lt;code&gt;operator&lt;/code&gt;を提供しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://strimzi.io/docs/0.7.0/#cluster-operator-str&#34;&gt;Cluster Operator&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;Kafka&lt;/code&gt;というCustom Resourceの状態を監視して、zookeeperやKafkaのデプロイ、設定、保守を行う&lt;br /&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://literalice.com/images/strimzi_cluster_operator.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://literalice.com/images/strimzi_cluster_operator.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;&lt;h4&gt;Strimzi Cluster Operator&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://strimzi.io/docs/0.7.0/#assembly-getting-started-topic-operator-str&#34;&gt;Topic Operator&lt;/a&gt;&lt;br /&gt;
KafkaTopicというCustom Resourceの状態を監視して、Cluster Operatorが保守しているKafka上にtopicを作成したり削除したり設定変更したりする&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://strimzi.io/docs/0.7.0/#assembly-getting-started-user-operator-str&#34;&gt;User Operator&lt;/a&gt;&lt;br /&gt;
KafkaUserというCustom Resourceの状態を監視して、Kafkaのユーザーを管理する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり、strimziを使うと、以下のようなyamlを、&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kafka.strimzi.io/v1alpha1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Kafka&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;my-cluster&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;kafka&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;replicas&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;listeners&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;plain&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;tls&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;readinessProbe&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;initialDelaySeconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;timeoutSeconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;livenessProbe&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;initialDelaySeconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;timeoutSeconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;kubectl -f kafka-cluster.yml&lt;/code&gt;というように適用するだけでkubernetes上にKafkaをプロビジョニングできるということです。便利ですね。&lt;/p&gt;

&lt;p&gt;そういうわけで、さっそくローカルのk8s環境で試してみましょう。&lt;/p&gt;

&lt;h2 id=&#34;minishiftにkafkaをoperatorでインストールする&#34;&gt;minishiftにKafkaをoperatorでインストールする&lt;/h2&gt;

&lt;p&gt;strimziがサポートしているKubernetes環境は、Kubernetes 1.9以上またはOpenShift3.9以上とのことです。&lt;br /&gt;
&lt;a href=&#34;http://strimzi.io/docs/0.7.0/#getting-started-str&#34;&gt;http://strimzi.io/docs/0.7.0/#getting-started-str&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回は、minishiftでローカルにOpenShift環境を立ち上げて試してみます。&lt;/p&gt;

&lt;p&gt;minishiftのインストールはこちらを参照してください。&lt;br /&gt;
&lt;a href=&#34;https://docs.okd.io/latest/minishift/getting-started/installing.html&#34;&gt;https://docs.okd.io/latest/minishift/getting-started/installing.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;インストールしたら、以下コマンドでローカルにOpenShiftを立ち上げます。&lt;br /&gt;
何となくメモリたくさん使いそうなので、6GB割り当てるようにしました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ minishift start --memory&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;6GB

&lt;span class=&#34;c1&#34;&gt;#...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
$ oc login -u system:admin&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;これ以降の手順ではclusterスコープの&lt;a href=&#34;https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/&#34;&gt;CRD&lt;/a&gt;を設定したりする関係上、&lt;code&gt;cluster-admin&lt;/code&gt;権限が必要なので、とりあえず&lt;code&gt;system:admin&lt;/code&gt;でログインしておきます。&lt;/p&gt;

&lt;h3 id=&#34;strimziのダウンロード&#34;&gt;strimziのダウンロード&lt;/h3&gt;

&lt;p&gt;strimziをGitHubからダウンロードします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/strimzi/strimzi-kafka-operator/releases&#34;&gt;https://github.com/strimzi/strimzi-kafka-operator/releases&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;strimziのcluster-operatorをインストールする&#34;&gt;strimziのCluster Operatorをインストールする&lt;/h3&gt;

&lt;p&gt;Kafkaのクラスタをインストール、設定してくれる、strimziの&lt;code&gt;Cluster Operator&lt;/code&gt;をインストールします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ oc new-project kafka-op &lt;span class=&#34;c1&#34;&gt;# Cluster Operatorをインストールするproject(namespace)を作成する
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; strimzi-0.7/ &lt;span class=&#34;c1&#34;&gt;# ダウンロードしたstrimziを解凍した先に移動
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Cluster Operatorのデプロイ設定に記載されているプロジェクト名を変更する
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/namespace: .*/namespace: kafka-op/&amp;#39;&lt;/span&gt; examples/install/cluster-operator/*RoleBinding*.yaml
&lt;span class=&#34;c1&#34;&gt;# Cluster Operatorのデプロイ
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ oc apply -f examples/install/cluster-operator -n kafka-op
$ oc apply -f examples/templates/cluster-operator -n kafka-op&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;cluster-operatorでkafkaのクラスタをインストールする&#34;&gt;Cluster OperatorでKafkaのクラスタをインストールする&lt;/h3&gt;

&lt;p&gt;Cluster Operatorがインストールされれば、それを使ってKafkaのクラスタをインストールできます。&lt;/p&gt;

&lt;p&gt;Cluster Operatorは、project(namespace)内のイベントを監視しており、ここに&lt;code&gt;Kafka&lt;/code&gt;(CR, &lt;a href=&#34;https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#create-custom-objects&#34;&gt;Custom Resource&lt;/a&gt;)を作成することでKafkaのクラスタをインストール、設定してくれます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Kafka&lt;/code&gt;(CR)は、yamlの例が「examples/kafka」に格納されています。&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;examples/kafka/kafka-ephemeral.yaml&lt;/dt&gt;
&lt;dd&gt;永続ストレージを割り当てない揮発性のKafkaクラスタ(検証用)&lt;/dd&gt;
&lt;dt&gt;examples/kafka/kafka-persistent.yaml&lt;/dt&gt;
&lt;dd&gt;永続ストレージを割り当てたKafkaクラスタ&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;今回は、検証用にephemeralなほうをインストールします。&lt;code&gt;Kafka&lt;/code&gt;CRは以下のような形式です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kafka.strimzi.io/v1alpha1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Kafka&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;my-cluster&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;kafka&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;replicas&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;listeners&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;plain&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;tls&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;readinessProbe&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;initialDelaySeconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;timeoutSeconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;livenessProbe&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;initialDelaySeconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;timeoutSeconds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;なんとなく、どんなクラスタができるか想像できますね。このCRをKubernetes上に作成します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ oc apply -f examples/kafka/kafka-ephemeral.yaml
$ oc get kafka

NAME           AGE
my-cluster     14s&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;上記のようにkafkaリソースが作成されたら、Cluster Operatorがkafkaリソースの定義に従ってKafkaのクラスタをセットアップしてくれるので、それを確認します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ oc get pods -w

NAME                                          READY     STATUS    RESTARTS   AGE
my-cluster-entity-operator-54758cf6f6-nvcqm   &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;/3       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          2m
my-cluster-kafka-0                            &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;          3m
my-cluster-kafka-1                            &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;          3m
my-cluster-kafka-2                            &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;          3m
my-cluster-zookeeper-0                        &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4m
my-cluster-zookeeper-1                        &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;          4m
my-cluster-zookeeper-2                        &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          4m
strimzi-cluster-operator-7d8898b9b9-d6sqd     &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          46m&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;このように、Kafkaとzookeeperがインストールされていることを確認できます。&lt;/p&gt;

&lt;h2 id=&#34;topic-operatorで-kafkaクラスタにtopicを作成する&#34;&gt;Topic Operatorで、KafkaクラスタにTopicを作成する&lt;/h2&gt;

&lt;p&gt;strimziは、Kafkaクラスタそのものを保守するCluster Operator以外にも、Kafkaクラスタにtopicやuserを作ってくれるOperatorも設定されます。&lt;/p&gt;

&lt;p&gt;Topic Operatorは、上記手順でインストールされた「my-cluster-entity-operator-xxxx」(Entity Operator)にあるので、すでに使える状態になっています。&lt;/p&gt;

&lt;p&gt;さっそくTopic OperatorでKafkaクラスタ上にtopicを作成してみます。「examples/topic/kafka-topic.yaml」に例がありますが、以下のようなKafkaTopicというCRを作成することでTopic OperatorがKafkaクラスタ上にtopicを作成してくれます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;kafka.strimzi.io/v1alpha1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;kind&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;KafkaTopic&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;metadata&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;name&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;my-topic&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;labels&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;strimzi.io/cluster&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;my-cluster&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;spec&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;partitions&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;replicas&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;config&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;retention.ms&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7200000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;segment.bytes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1073741824&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;これを、以下のようにKubernetesクラスタに適用します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ oc apply -f examples/topic/kafka-topic.yaml&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;これで、Kafkaクラスタにtopicが作成されます。&lt;/p&gt;

&lt;h2 id=&#34;kafkaクラスタにメッセージを投げてみる&#34;&gt;Kafkaクラスタにメッセージを投げてみる&lt;/h2&gt;

&lt;p&gt;さて、Kafkaクラスタがインストールされたので、このKafkaにメッセージをPublish/Subscribeしてみます。&lt;/p&gt;

&lt;p&gt;strimziには、サンプルのクライアントも付いているので、簡単にKafkaクラスタを検証できます。&lt;/p&gt;

&lt;h3 id=&#34;メッセージをsubscribeするクライアントを実行する&#34;&gt;メッセージをSubscribeするクライアントを実行する&lt;/h3&gt;

&lt;p&gt;以下でメッセージをSubscribeしてみます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ oc run kafka-consumer -ti --image&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;strimzi/kafka:0.7.0 --restart&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Never &lt;span class=&#34;se&#34;&gt;\-&lt;/span&gt;- bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic my-topic --from-beginning&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;上記コマンドを実行すると、Kubernetes上でサンプルクライアントが実行され、Kafkaのトピック「my-topic」をSubscribeする状態になります。&lt;/p&gt;

&lt;p&gt;メッセージをPublishするクライアントを実行する
ターミナルをもう一つ開いて、以下コマンドを実行します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ oc run kafka-producer -ti --image&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;strimzi/kafka:0.7.0 --restart&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Never &lt;span class=&#34;se&#34;&gt;\-&lt;/span&gt;- bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;プロンプトが開くので、適当に文字列を入力してみてください。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;If you don&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;t see a &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; prompt, try pressing enter.
&amp;gt;test
&amp;gt;a aaa&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;すると、kafka-consumerの上で入力したメッセージが表示されるのを確認できるはずです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;If you don&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;t see a &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; prompt, try pressing enter.
&amp;gt;test
&amp;gt;a aaa&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;まとめ
さて、Kubernetes上にKafkaをインストールし、メッセージングプラットフォームを構築してみました。&lt;/p&gt;

&lt;p&gt;実際には、JavaやRubyのクライアントからこのKafkaのトピックをPub/Subして非同期通信、マイクロサービスを実現したり、IoTなイベントを受けたり、ログ集約基盤を作ったりするわけです。&lt;/p&gt;

&lt;p&gt;そういうわけで、次はJavaアプリからこのKafkaを使ってみます。&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>